# Collection of functions to work with a Grid. Stores all its children in the grid array
extends 'res://fisherman/GridBase.gd'

onready var Obstacle_1 = null
onready var Obstacle_2 = null
onready var Obstacle_3 = null

#define the map
onready var map={}

func initMap():
	var global=get_node("/root/global");
	global.point = "fisherman_2"
	map={
		[0,3]:"Obstacle_3",  
		[10,1]:"Obstacle_2",
		[10,5]:"Obstacle_1",
	}
	Obstacle_1 = preload("res://fisherman/sheep.tscn")
	Obstacle_2 = preload("res://fisherman/wolf_locked.tscn")
	Obstacle_3 = preload("res://fisherman/grass.tscn")
	# Obstacles
	var positions = []
<<<<<<< HEAD
=======

	for pos in positions:
		var new_obstacle = Obstacle_1.instance()
		new_obstacle.set_pos(map_to_world(pos) + half_tile_size)
		grid[pos.x][pos.y] = new_obstacle.get_name()
		add_child(new_obstacle)

>>>>>>> release/1.0
	#process map
	for entry in map:
		var pos=Vector2(entry[0], entry[1])
		positions.append(pos)
		var new_obstacle=null
		if(map[entry]=="Obstacle_1"):
			new_obstacle=Obstacle_1.instance()
		elif(map[entry]=="Obstacle_2"):
			new_obstacle=Obstacle_2.instance()
		elif(map[entry]=="Obstacle_3"):
			new_obstacle=Obstacle_3.instance()
		new_obstacle.set_pos(map_to_world(pos) + half_tile_size)
		grid[pos.x][pos.y] = map[entry]
		grid_inst[pos.x][pos.y]=new_obstacle
		add_child(new_obstacle)

<<<<<<< HEAD
func is_goal(pos):
	if global.steps.size() > 14:
		return false
=======
func get_cell_content(pos=Vector2()):
	return grid[pos.x][pos.y]


func is_cell_vacant(pos=Vector2(), direction=Vector2()):
	var grid_pos = world_to_map(pos) + direction
	if grid_pos.x < grid_size.x and grid_pos.x >= 0:
		if grid_pos.y < grid_size.y and grid_pos.y >= 0:
			return true if grid[grid_pos.x][grid_pos.y] == null else true
	return false


func update_child_pos(new_pos, direction, type):
	# Remove node from current cell, add it to the new cell, returns the new target move_to position
	var grid_pos = world_to_map(new_pos)
	print(grid_pos)
	grid[grid_pos.x][grid_pos.y] = null
	var new_grid_pos = grid_pos + direction
	grid[new_grid_pos.x][new_grid_pos.y] = type
	var target_pos = map_to_world(new_grid_pos) + half_tile_size
	return target_pos
	

func is_goal(pos):
	print(grid[pos.x][pos.y])
	if global.steps.size() > 14:
		return false
	if grid[pos.x][pos.y]==null:
		return false
	if String(grid[pos.x][pos.y])=="0":
		return false
>>>>>>> release/1.0
	return pos.x==10 and pos.y==3



